mutation RegisterWithCredentials(
  $registerWithCredentialsInput: RegisterWithCredentialsInput!
) {
  registerWithCredentials(
    registerWithCredentialsInput: $registerWithCredentialsInput
  ) {
    updatedAt
    uid
    name
    image
    createdAt
  }
}

query Companies(
  $distinct: [CompanyScalarFieldEnum!]
  $orderBy: [CompanyOrderByWithRelationInput!]
  $where: CompanyWhereInput
  $cursor: CompanyWhereUniqueInput
  $skip: Float
  $take: Float
) {
  companies(
    distinct: $distinct
    orderBy: $orderBy
    where: $where
    cursor: $cursor
    skip: $skip
    take: $take
  ) {
    createdAt
    description
    displayName
    garages {
      id
    }
    id
    managers {
      uid
    }
    updatedAt
  }
}

mutation Login($loginInput: LoginInput!) {
  login(loginInput: $loginInput) {
    token
    user {
      uid
      name
      image
    }
  }
}

query GetAuthProvider($uid: String!) {
  getAuthProvider(uid: $uid) {
    uid
    type
  }
}

mutation RegisterWithProvider(
  $registerWithProviderInput: RegisterWithProviderInput!
) {
  registerWithProvider(registerWithProviderInput: $registerWithProviderInput) {
    uid
  }
}

query SearchGarages(
  $dateFilter: DateFilterInput!
  $locationFilter: LocationFilterInput!
  $slotsFilter: SlotWhereInput
  $garageFilter: GarageFilter
) {
  searchGarages(
    dateFilter: $dateFilter
    locationFilter: $locationFilter
    slotsFilter: $slotsFilter
    garageFilter: $garageFilter
  ) {
    id
    address {
      lat
      lng
      address
    }
    images
    displayName
    availableSlots(dateFilter: $dateFilter, slotsFilter: $slotsFilter) {
      type
      pricePerHour
      count
    }
    verification {
      verified
    }
  }
}

query myCompany {
  myCompany {
    id
    garages {
      displayName
      id
      description
      address {
        id
        address
        lat
        lng
      }
    }
    createdAt
    displayName
  }
}

mutation CreateCompany($createCompanyInput: CreateCompanyInput!) {
  createCompany(createCompanyInput: $createCompanyInput) {
    id
  }
}

query Garages(
  $skip: Float
  $take: Float
  $cursor: GarageWhereUniqueInput
  $orderBy: [GarageOrderByWithRelationInput!]
  $where: GarageWhereInput
) {
  garages(
    skip: $skip
    take: $take
    cursor: $cursor
    orderBy: $orderBy
    where: $where
  ) {
    id
    displayName
    description
    images
    verification {
      verified
    }
    address {
      id
      lat
      lng
      address
    }
    slotCounts {
      type
      count
    }
  }

  garagesCount(where: $where) {
    count
  }
}

mutation CreateGarage($createGarageInput: CreateGarageInput!) {
  createGarage(createGarageInput: $createGarageInput) {
    id
  }
}

mutation CreateManySlots($createSlotInput: CreateSlotInput!, $count: Float!) {
  createManySlots(createSlotInput: $createSlotInput, count: $count) {
    count
  }
}

fragment ValetFields on Valet {
  image
  uid
  displayName
}

fragment BookingFields on Booking {
  id
  pricePerHour
  endTime
  startTime
  vehicleNumber
  passcode
  status
  bookingTimeline {
    status
    timestamp
  }
  valetAssignment {
    pickupValet {
      ...ValetFields
    }
    returnValet {
      ...ValetFields
    }
  }
  slot {
    displayName
    garage {
      images
      address {
        address
        lat
        lng
      }
    }
  }
}

query BookingsForCustomer(
  $skip: Float
  $take: Float
  $cursor: BookingWhereUniqueInput
  $orderBy: [BookingOrderByWithRelationInput!]
  $where: BookingWhereInput
  $distinct: [BookingScalarFieldEnum!]
) {
  bookingsForCustomer(
    skip: $skip
    take: $take
    cursor: $cursor
    orderBy: $orderBy
    where: $where
    distinct: $distinct
  ) {
    ...BookingFields
  }

  bookingsCount(where: $where) {
    count
  }
}

query BookingsForGarage(
  $skip: Float
  $take: Float
  $cursor: BookingWhereUniqueInput
  $orderBy: [BookingOrderByWithRelationInput!]
  $where: BookingWhereInput
  $distinct: [BookingScalarFieldEnum!]
) {
  bookingsForGarage(
    skip: $skip
    take: $take
    cursor: $cursor
    orderBy: $orderBy
    where: $where
    distinct: $distinct
  ) {
    ...BookingFields
  }

  bookingsCount(where: $where) {
    count
  }
}

mutation createBookingTimeline(
  $createBookingTimelineInput: CreateBookingTimelineInput!
) {
  createBookingTimeline(
    createBookingTimelineInput: $createBookingTimelineInput
  ) {
    bookingId
    id
    managerId
    status
    timestamp
  }
}
